---
layout: post
title:  "20171101 solutions"
date:   2017-11-02 22:46:14 +0800
tag: 程序设计实践
---

### A
字符串处理。给定一个文件，输出其中的可能是单词的字符串。
文件可能很大，所以只能边读入边处理：
如果遇到字母，那么先看一下前面有没有累加的空格没有输出，若有先输出空格，然后输出这个字母；
如果遇到逗号或者换行，表示一个新的单词开始；
如果遇到空格，空格计数器加一.

```C
void put_spaces(int cnt) {
    while (cnt--) putchar(' ');
}

int main() {
    int spaces = 0;
    char c;
    int beg = 0;
    while ((c = getchar()) != EOF) {
        if (c == ' ') spaces++;
        else if (isalpha(c)) {
            if (beg && spaces) put_spaces(spaces);
            putchar(c);
            spaces = 0;
            if (beg == 0) beg = 1;
        } else if (c == ',' || c == '\n') {
            if (beg)puts("");
            beg = 0; spaces = 0;
        }
    }
    // if (beg) puts("");
    return 0;
}
```

### B

最大化最小值问题，直接二分答案即可。

```C
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define maxn 100005
int arr[maxn];

int cmp(const void* a, const void* b) {
    return *(int*)a > *(int*)b;
}

int n;
int check(int mid) {
    int ans = 1, i;
    int pre = 0; // pre保存的是前一个可以放cow的地方
    for (i = 1; i < n; ++i) {
        if (arr[i] < arr[pre] + mid) continue;
        else {
            ans++; pre = i;
        }
    }
    return ans;
}


int main() {
#ifndef ONLINE_JUDGE
    freopen("B.in", "r", stdin);
#endif
    int c;
    while (scanf("%d %d", &n, &c) != EOF) {
        int i;
        for (i = 0; i < n; ++i) {
            scanf("%d", &arr[i]);
        }
        qsort(arr, n, sizeof(int), cmp);
        int low = 0, high = arr[n - 1];
        int mid;

        int ans;
        while (low <= high) {
            mid = (low + high) >> 1;
            if (check(mid) >= c) {
                ans = mid;
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        printf("%d\n", ans);
    }

    return 0;
}
```

### C
栈的简单使用，按照题目要求来就行，注意细节。


```C
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct stack {
    int top;
    char s[105][77];
}St;

void init(St *st) {
    st -> top = -1;
}

void push(St* st, char s[]) {
    strcpy(st -> s[++st->top], s);
}

int empty(St* st) {
    return st -> top == -1;
}

void pop(St* st) {
    st -> top --;
}

char* top(St* st) {
    return st -> s[st -> top];
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("C.in", "r", stdin);
#endif
    St fow, bak;
    init(&fow), init(&bak);
    char current[77] = "http://www.acm.org/";
    char op[11];
    while (1) {
        scanf("%s", op);
        if (op[0] == 'Q') break;
        if (op[0] == 'V') {
            push(&bak, current);
            scanf("%s", current);
            puts(current);
            init(&fow);
        } else if (op[0] == 'F') {
            if (empty(&fow))  puts("Ignored");
            else {
                push(&bak, current);
                strcpy(current, top(&fow));
                pop(&fow);
                puts(current);
            }
        } else if (op[0] == 'B') {
            if (empty(&bak)) puts("Ignored");
            else {
                push(&fow, current);
                strcpy(current, top(&bak));
                pop(&bak);
                puts(current);
            }
        }
    }

    return 0;
}
```

### D
求每个人可以分到的pie的体积。
对结果二分即可，跟我们课上讲的是一样的。注意精度。可以最后再乘PI。

```C
#include <string.h>
#include <stdio.h>
#include <math.h>

#define PI  acos(-1.0)
#define eps 1e-7

int n;
int arr[10005];
int check(double mid) {
    int ans = 0, i;
    for (i = 0; i < n; ++i) {
        ans += (int)(arr[i] / mid);
    }
    return ans;
}
int main() {
#ifndef ONLINE_JUDGE
    freopen("D.in", "r", stdin);
#endif
    int nc;
    scanf("%d", &nc);
    while (nc--) {
        int f;
        scanf("%d %d", &n, &f);
        f++;
        int i;
        for (i = 0; i < n; ++i) {
            scanf("%d", &arr[i]);
            arr[i] *= arr[i];
        }

        double low = 0, high = 100000050;
        while (high - low > eps) {
            double mid = (low + high) / 2;
            if (check(mid) >= f) {
                low = mid;
            } else {
                high = mid;
            }
        }
        printf("%.4f\n", low * PI);
    }
    return 0;
}
```

### E
可以推出数学公式，然后二分答案即可。

```C
#include <string.h>
#include <stdio.h>
#include <math.h>

#define eps 1e-10
double x, y, c;
int check(double mid) {
    return 1 - c / sqrt(x * x - mid * mid) - c / sqrt(y * y - mid * mid) > 0;
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("E.in", "r", stdin);
#endif

    while (scanf("%lf %lf %lf", &x, &y, &c) != EOF) {
        double low = 0, high = x +y;
        while (low < high - eps) {
            double mid = (low + high) / 2;
            if (check(mid)) low = mid;
            else high = mid;
        }
        printf("%.3lf\n", low);
    }

    return 0;
}
```
