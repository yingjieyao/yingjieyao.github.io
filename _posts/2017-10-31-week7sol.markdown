---
layout: post
title:  "20171025 solutions"
date:   2017-10-31 22:46:14 +0800
tag: 程序设计实践
---

### A
结构体排序。
我们只需要知道对于两个结构体变量a和b，什么时候让a排在b前面，什么时候让b排在a前面就好了。


```C
#include <stdio.h>

#define Node struct node
struct node{
    int x, y;
    int id;
}arr[100000 + 5];

int cmp(Node i, Node j) {
    if ((i.x < j.x) || (i.x == j.x && i.y < j.y))
        return 1; // i应该排在j前面
    else return 0;
}
void quick_sort(int beg, int ed) {
    if (beg >= ed) {
        return ;
    }
    Node tmp = arr[beg];
    int left = beg, right = ed;
    while (left < right) {
        while (left < right && cmp(tmp, arr[right]) == 1) right--;
        if (left < right) {
            arr[left] = arr[right];
            left++;
        }
        while (left < right && cmp(arr[left], tmp) == 1) left++;
        if (left < right) {
            arr[right] = arr[left];
            right--;
        }
    }
    arr[left] = tmp;
    quick_sort(beg, left - 1);
    quick_sort(left + 1, ed);
}

int main() {
    int n;
    while (scanf("%d", &n) == 1) {
        int i;
        for (i = 0; i < n; ++i) {
            scanf("%d %d", &arr[i].x, &arr[i].y);
            arr[i].id = i;
        }
        quick_sort(0, n - 1);
        printf("%d", arr[0].id);
        for (i = 1; i < n; ++i) {
            printf(" %d", arr[i].id);
        }
        puts("");
    }

    return 0;
}

```

### B
链表快排。小于基准值的放到一个链表里，等于的放一个，大于的放另一个里面。

然后分别对第一个和第三个排序，最后把它们三个拼接起来就好了。


```C
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef struct Node node;
struct Node {
    int x;
    node* next;
};

node* quick_sort_list(node* head) {
    if (!head) return NULL;
    node *low = NULL, *high = NULL;
    node *equ = NULL;
    int val = abs(head -> x);
    while (head) {
        node *tmp = head -> next;
        if (abs(head -> x) > val) {
            if (high == NULL) {
                high = head;
                high -> next = NULL;
            } else {
                head -> next = high -> next;
                high -> next = head;
            }
        } else if(abs(head->x) < val){
            if (low == NULL) {
                low = head;
                low -> next = NULL;
            } else {
                head -> next = low -> next;
                low -> next = head;
            }
        } else {
            if (equ == NULL) {
                equ = head;
                equ -> next = NULL;
            } else {
                head -> next = equ -> next;
                equ -> next = head;
            }
        }
        head = tmp;
    }

    low = quick_sort_list(low);
    high = quick_sort_list(high);

    if (low) head = low;
    else if (equ) head = equ;
    else head = high;

    while (low && low -> next) low = low -> next;
    if (low && equ) low -> next = equ;
    else if (low) low -> next = high;

    while (equ && equ -> next) equ = equ -> next;
    if (equ) equ -> next = high;

    return head;
}

void print_list(node *head) {
    if (!head) return;
    print_list(head -> next);
    printf("%d ", head -> x);
}

int main() {
    int n;
    while (scanf("%d", &n) == 1 && n) {
        int d, i;
        node* head = NULL;
        for (i = 0; i < n; ++i) {
            scanf("%d", &d);
            node* cur = (node*)malloc(sizeof(node));
            cur -> x = d;
            cur -> next = NULL;
            if (head == NULL) {
                head = cur;
            } else {
                cur -> next = head -> next;
                head -> next = cur;
            }
        }
        head = quick_sort_list(head);
        print_list(head);
        puts("");
    }
    return 0;
}
```

### C

用链表实现栈，只需要插入的时候插入到头节点后面；
出栈的时候将头节点后面的那个一个节点出栈就可以。
入栈出栈的时间复杂度都是O(1)。

```C
#include <stdio.h>
#include <stdlib.h>

typedef struct Node node;
struct Node {
    int x;
    node* next;
};
int main() {
    int n, d;
    char s[11];
    while (scanf("%d", &n) == 1) {
        node* head = (node*)malloc(sizeof(node));
        while (n--) {
            scanf("%s", s);
            if (s[2] == 'S') {
                scanf("%d", &d);
                node* cur = (node*)malloc(sizeof(node));
                cur -> x = d;
                cur -> next = head -> next;
                head -> next = cur;
            } else if (s[2] == 'E') {
                if (head -> next) printf("%d\n", head -> next-> x);
                else puts("NULL");
            } else {
                if (head -> next) {
                    head -> next = head -> next -> next;
                }
                else puts("I can't do that!");
            }
        }

    }
    return 0;
}

```
